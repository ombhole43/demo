package com.demo;
public class BankAccountThread {
    private int balance;

    public BankAccount(int initialBalance) {
        this.balance = initialBalance;
    }

    public synchronized void deposit(int amount) {
        balance += amount;
        System.out.println("Deposited: " + amount + ", Current Balance: " + balance);
    }

    public synchronized void withdraw(int amount) {
        if (balance >= amount) {
            balance -= amount;
            System.out.println("Withdrawn: " + amount + ", Current Balance: " + balance);
        } else {
            System.out.println("Insufficient balance for withdrawal");
        }
    }

    public static void main(String[] args) {
        BankAccount account = new BankAccount(1000);

        Thread depositThread = new Thread(() -> {
            for (int i = 0; i < 5; i++) {
                account.deposit(200);
                try {
                    Thread.sleep(100); 
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        Thread withdrawThread = new Thread(() -> {
            for (int i = 0; i < 3; i++) {
                account.withdraw(300);
                try {
                    Thread.sleep(150); 
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        depositThread.start();
        withdrawThread.start();
    }
}

Output:
Deposited: 200, Current Balance: 1200
Withdrawn: 300, Current Balance: 900
Deposited: 200, Current Balance: 1100
Withdrawn: 300, Current Balance: 800
Deposited: 200, Current Balance: 1000
Withdrawn: 300, Current Balance: 700
Deposited: 200, Current Balance: 900
Deposited: 200, Current Balance: 1100
